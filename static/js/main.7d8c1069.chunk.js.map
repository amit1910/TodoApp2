{"version":3,"sources":["TodoList.js","TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","react_default","a","createElement","className","onSubmit","this","props","addItem","placeholder","ref","inputElement","value","currentItem","text","onChange","handleInput","type","Component","TodoItems","createTasks","item","key","onClick","_this","deleteItem","listItems","entries","map","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","target","Date","now","setState","preventDefault","newItem","state","console","log","items","toConsumableArray","concat","filteredItems","filter","bind","assertThisInitialized","src_TodoList","src_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPA4BeA,mLAlBH,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKC,MAAMC,SACzBP,EAAAC,EAAAC,cAAA,SACEM,YAAY,aACZC,IAAKJ,KAAKC,MAAMI,aAChBC,MAAON,KAAKC,MAAMM,YAAYC,KAC9BC,SAAUT,KAAKC,MAAMS,cAEvBf,EAAAC,EAAAC,cAAA,UAAQc,KAAK,UAAb,wBAhBYC,aCcTC,6MAfXC,YAAc,SAAAC,GACV,OACEpB,EAAAC,EAAAC,cAAA,MAAImB,IAAKD,EAAKC,IAAKC,QAAS,kBAAMC,EAAKjB,MAAMkB,WAAWJ,EAAKC,OAC1DD,EAAKP,+EAKd,IACMY,EADcpB,KAAKC,MAAMoB,QACDC,IAAItB,KAAKc,aAEvC,OAAOnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWsB,UAZZR,aCwDTW,qBApDb,SAAAA,IAAc,IAAAL,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAAxB,KAAAuB,IACZL,EAAAM,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5B,QAOFU,YAAc,SAAAmB,GACZ,IACMtB,EAAc,CAAEC,KADLqB,EAAEC,OAAOxB,MACYU,IAAKe,KAAKC,OAChDd,EAAKe,SAAS,CACZ1B,iBAZUW,EAedhB,QAAU,SAAA2B,GACRA,EAAEK,iBACF,IAAMC,EAAUjB,EAAKkB,MAAM7B,YAC3B,GAAqB,KAAjB4B,EAAQ3B,KAAa,CACvB6B,QAAQC,IAAIH,GACZ,IAAMI,EAAKf,OAAAgB,EAAA,EAAAhB,CAAON,EAAKkB,MAAMG,OAAlBE,OAAA,CAAyBN,IACpCjB,EAAKe,SAAS,CACZM,MAAOA,EACPhC,YAAa,CAAEC,KAAM,GAAIQ,IAAK,QAvBtBE,EA2BdC,WAAa,SAAAH,GACX,IAAM0B,EAAgBxB,EAAKkB,MAAMG,MAAMI,OAAO,SAAA5B,GAC5C,OAAOA,EAAKC,MAAQA,IAEtBE,EAAKe,SAAS,CACZM,MAAOG,KA9BTxB,EAAKkB,MAAM,CACTG,MAAM,GACNhC,YAAY,CAACC,KAAK,GAAIQ,IAAI,KAE5BE,EAAKR,YAAcQ,EAAKR,YAAYkC,KAAjBpB,OAAAqB,EAAA,EAAArB,QAAAqB,EAAA,EAAArB,CAAAN,KANPA,wEAoCZ,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACiD,EAAD,CACA5C,QAASF,KAAKE,QACdG,aAAcL,KAAKK,aACnBK,YAAaV,KAAKU,YAClBH,YAAaP,KAAKoC,MAAM7B,cAExBZ,EAAAC,EAAAC,cAACkD,EAAD,CAAW1B,QAASrB,KAAKoC,MAAMG,MAAMpB,WAAYnB,KAAKmB,qBA7C1CP,cCKEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d8c1069.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './index.css';\r\n\r\n class TodoList extends Component{\r\n    // componentDidUpdate(){\r\n    //     this.props.inputElement.current.focus()\r\n    // }\r\n\r\n        render(){\r\n            return(\r\n                <div className=\"todoListMain\">\r\n        <div className=\"header\">\r\n          <form onSubmit={this.props.addItem}>\r\n            <input\r\n              placeholder=\"Enter Task\"\r\n              ref={this.props.inputElement}\r\n              value={this.props.currentItem.text}\r\n              onChange={this.props.handleInput}\r\n            />\r\n            <button type=\"submit\"> Add Task </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n            );  \r\n        }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react'\r\n\r\nclass TodoItems extends Component {\r\n    createTasks = item => {\r\n        return (\r\n          <li key={item.key} onClick={() => this.props.deleteItem(item.key)}>\r\n            {item.text}\r\n          </li>\r\n        )\r\n      }\r\n  render() {\r\n    const todoEntries = this.props.entries\r\n    const listItems = todoEntries.map(this.createTasks)\r\n\r\n    return <ul className=\"theList\">{listItems}</ul>\r\n  }\r\n}\r\n\r\nexport default TodoItems","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport TodoItems from './TodoItems';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state={\n      items:[],\n      currentItem:{text:'', key:'',}\n    }\n    this.handleInput = this.handleInput.bind(this);\n  }\n  handleInput = e => {\n    const itemText = e.target.value\n    const currentItem = { text: itemText, key: Date.now() }\n    this.setState({\n      currentItem,\n    })\n  }\n  addItem = e => {\n    e.preventDefault()\n    const newItem = this.state.currentItem\n    if (newItem.text !== '') {\n      console.log(newItem)\n      const items = [...this.state.items, newItem]\n      this.setState({\n        items: items,\n        currentItem: { text: '', key: '' },\n      })\n    }\n  }\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== key\n    })\n    this.setState({\n      items: filteredItems,\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <TodoList \n      addItem={this.addItem}\n      inputElement={this.inputElement}\n      handleInput={this.handleInput}\n      currentItem={this.state.currentItem}\n      />\n      <TodoItems entries={this.state.items}deleteItem={this.deleteItem}/>\n      </div>\n\n      \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}